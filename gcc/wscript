import json
import os
from waflib.Configure import conf
from waflib.extras.cpuinfo import find_dcache_line_size, find_pointer_size, find_cpu_isa
import mandatory, release, debug, x86, x86_64

def options(optCtx):
    optCtx.add_option('--mode', type='string',
	    default='release', dest='mode',
	    help='Build mode, e.g. release, debug')
    optCtx.add_option('--platform', type='string',
	    default='%sbit' % find_pointer_size(), dest='platform',
	    help='Build platform, e.g. 32bit, 64bit')

@conf
def check_hardware(self):
    self.start_msg('Detecting CPU instruction set')
    self.env.cpu_isa = find_cpu_isa()
    if self.env.cpu_isa is None:
	self.fatal('could not be detected')
    else:
	self.end_msg(self.env.cpu_isa)
    self.start_msg('Detecting CPU dcache line size')
    self.env.dcache_line_size = find_dcache_line_size()
    if self.env.dcache_line_size is None:
	self.fatal('could not be detected')
    else:
	self.end_msg('%s bytes' % self.env.dcache_line_size)
    self.start_msg('Detecting native pointer size')
    self.env.pointer_size = find_pointer_size()
    if self.env.pointer_size is None:
	self.fatal('could not be detected')
    else:
	self.end_msg('%s bit' % self.env.pointer_size)

def configure(confCtx):
    confCtx.check_hardware()
    config = []
    config.extend(json.loads(mandatory.configure(confCtx)))

    if confCtx.options.mode.lower() == 'debug':
	config.extend(json.loads(debug.configure(confCtx)))
    elif confCtx.options.mode.lower() == 'release':
	config.extend(json.loads(release.configure(confCtx)))

    if confCtx.env.cpu_isa.lower() == 'x86_64':
	if confCtx.options.platform.lower() == '32bit':
	    config.extend(json.loads(x86.configure(confCtx)))
	elif confCtx.options.platform.lower() == '64bit':
	    config.extend(json.loads(x86_64.configure(confCtx)))

    if not os.access(confCtx.path.get_bld().abspath(), os.F_OK):
	os.makedirs(confCtx.path.get_bld().abspath())
    outfile = open(confCtx.path.get_bld().make_node('gcc.json').abspath(), 'w')
    try:
	outfile.write(json.dumps(config, indent=True))
	outfile.write('\n')
    finally:
	outfile.close()
